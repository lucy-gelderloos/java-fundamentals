/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package linter;

import java.io.File;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;


public class App {

    public static void main(String[] args) throws IOException {
        String testFileNoErrors = "noErrors";
        String testFileOneError = "oneError";
        String testFileFewErrors = "fewErrors";
        String testFileManyErrors = "manyErrors";


        try {
            lintSemicolons(testFileNoErrors);
            lintSemicolons(testFileOneError);
            lintSemicolons(testFileFewErrors);
            lintSemicolons(testFileManyErrors);
        }
        catch  (IOException ioe) {
            ioe.printStackTrace();
        }
    }

    public static String lintSemicolons(String fileName) throws IOException {

            String returnString = fileName;
            String filePathString = System.getProperty("user.dir") + "/src/main/resources/" + fileName + ".js";
            Path filePath = Paths.get(filePathString);
            Scanner scanner = null;
            scanner = new Scanner(filePath);

            try {
                int lineNo = 0;
                Pattern enforceSemicolons = Pattern.compile("(^$)|^//|(for)|(if)|(else)|((\\{$)|(}$)|(;$))");  // double-escape characters like { https://stackoverflow.com/questions/1379191/why-does-this-java-regex-cause-illegal-escape-character-errors
                while (scanner.hasNextLine()) {
                    lineNo = lineNo + 1;
                    String currentLine = scanner.nextLine();
                    Matcher semicolonMatcher = enforceSemicolons.matcher(currentLine);
                    if (!semicolonMatcher.find()) {
                        returnString = returnString + "\n" + "Line " + lineNo + ": missing semicolon";
                    }
                }
                throw new IOException();
            }

            catch (IOException ioe) {
                ioe.printStackTrace();
            }

            finally {
                return returnString;

            }
    }
}